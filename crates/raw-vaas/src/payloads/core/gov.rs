use crate::Payload;

pub(crate) const GOV_MODULE: &[u8; 32] = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Core";

/// Core Bridge Governance payload, including type
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct CoreBridgeGovPayload<'a> {
    pub(crate) span: &'a [u8],

    decree: CoreBridgeDecree<'a>,
}

impl AsRef<[u8]> for CoreBridgeGovPayload<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<Payload<'a>> for CoreBridgeGovPayload<'a> {
    type Error = &'static str;

    fn try_from(payload: Payload<'a>) -> Result<CoreBridgeGovPayload<'a>, &'static str> {
        CoreBridgeGovPayload::parse(payload.span)
    }
}

impl<'a> CoreBridgeGovPayload<'a> {
    pub fn span(&self) -> &[u8] {
        self.span
    }

    pub fn decree(&self) -> CoreBridgeDecree<'a> {
        self.decree
    }

    pub fn parse(span: &[u8]) -> Result<CoreBridgeGovPayload, &'static str> {
        if span.is_empty() {
            return Err("CoreBridgeGovPayload span too short. Need at least 1 byte");
        }

        if &span[..32] != GOV_MODULE {
            return Err("Invalid Core Bridge governance message");
        }

        let decree = CoreBridgeDecree::parse(&span[32..])?;

        Ok(CoreBridgeGovPayload { span, decree })
    }
}

/// The non-type-flag contents
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CoreBridgeDecree<'a> {
    ContractUpgrade(ContractUpgrade<'a>),
    GuardianSetUpdate(GuardianSetUpdate<'a>),
    SetMessageFee(SetMessageFee<'a>),
    TransferFees(TransferFees<'a>),
    RecoverChainId(RecoverChainId<'a>),
}

impl AsRef<[u8]> for CoreBridgeDecree<'_> {
    fn as_ref(&self) -> &[u8] {
        match self {
            CoreBridgeDecree::ContractUpgrade(inner) => inner.as_ref(),
            CoreBridgeDecree::GuardianSetUpdate(inner) => inner.as_ref(),
            CoreBridgeDecree::SetMessageFee(inner) => inner.as_ref(),
            CoreBridgeDecree::TransferFees(inner) => inner.as_ref(),
            CoreBridgeDecree::RecoverChainId(inner) => inner.as_ref(),
        }
    }
}

impl<'a> TryFrom<&'a [u8]> for CoreBridgeDecree<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<CoreBridgeDecree<'a>, &'static str> {
        CoreBridgeDecree::parse(span)
    }
}

impl<'a> CoreBridgeDecree<'a> {
    pub fn span(&self) -> &[u8] {
        self.as_ref()
    }

    pub fn contract_upgrade(&self) -> Option<&ContractUpgrade> {
        match self {
            CoreBridgeDecree::ContractUpgrade(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn guardian_set_update(&self) -> Option<&GuardianSetUpdate> {
        match self {
            CoreBridgeDecree::GuardianSetUpdate(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn set_message_fee(&self) -> Option<&SetMessageFee> {
        match self {
            CoreBridgeDecree::SetMessageFee(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn transfer_fees(&self) -> Option<&TransferFees> {
        match self {
            CoreBridgeDecree::TransferFees(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn recover_chain_id(&self) -> Option<&RecoverChainId> {
        match self {
            CoreBridgeDecree::RecoverChainId(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn parse(span: &'a [u8]) -> Result<Self, &'static str> {
        if span.is_empty() {
            return Err("CoreBridgeDecree span too short. Need at least 1 byte");
        }

        let decree = match span[0] {
            1 => CoreBridgeDecree::ContractUpgrade(TryFrom::try_from(&span[1..])?),
            2 => CoreBridgeDecree::GuardianSetUpdate(TryFrom::try_from(&span[1..])?),
            3 => CoreBridgeDecree::SetMessageFee(TryFrom::try_from(&span[1..])?),
            4 => CoreBridgeDecree::TransferFees(TryFrom::try_from(&span[1..])?),
            5 => CoreBridgeDecree::RecoverChainId(TryFrom::try_from(&span[1..])?),
            _ => {
                return Err("Invalid Core Bridge decree");
            }
        };

        Ok(decree)
    }
}

/// Upgrade a contract
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ContractUpgrade<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for ContractUpgrade<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for ContractUpgrade<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<ContractUpgrade<'a>, &'static str> {
        ContractUpgrade::parse(span)
    }
}

impl<'a> ContractUpgrade<'a> {
    pub fn chain(&self) -> u16 {
        u16::from_be_bytes(self.span[..2].try_into().unwrap())
    }

    pub fn implementation(&self) -> [u8; 32] {
        self.span[2..34].try_into().unwrap()
    }

    pub fn parse(span: &'a [u8]) -> Result<ContractUpgrade<'a>, &'static str> {
        if span.len() != 34 {
            return Err("ContractUpgrade span too short. Need exactly 34 bytes");
        }

        Ok(ContractUpgrade { span: &span[..34] })
    }
}

/// Update guardian set
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct GuardianSetUpdate<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for GuardianSetUpdate<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for GuardianSetUpdate<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<GuardianSetUpdate<'a>, &'static str> {
        GuardianSetUpdate::parse(span)
    }
}

impl<'a> GuardianSetUpdate<'a> {
    pub fn new_index(&self) -> u32 {
        u32::from_be_bytes(self.span[2..6].try_into().unwrap())
    }

    pub fn num_guardians(&self) -> u8 {
        self.span[6]
    }

    pub fn try_guardian_at(&self, i: usize) -> Result<[u8; 20], &'static str> {
        if i >= usize::from(self.num_guardians()) {
            return Err("Exceeds number of encoded guardians");
        }

        Ok(self.guardian_at(i))
    }

    pub fn guardian_at(&self, i: usize) -> [u8; 20] {
        self.span[(7 + i * 20)..(7 + (i + 1) * 20)]
            .try_into()
            .unwrap()
    }

    pub fn parse(span: &'a [u8]) -> Result<GuardianSetUpdate<'a>, &'static str> {
        if span.len() < 27 {
            return Err("GuardianSetUpdate span too short. Need at least 27 bytes (for at least 1 guardian)");
        }

        let expected_len = 7 + usize::from(span[6]) * 20;
        if span.len() != expected_len {
            return Err(
                "GuardianSetUpdate span too short. Need exactly 7 + num_guardians * 20 bytes",
            );
        }

        Ok(GuardianSetUpdate {
            span: &span[..expected_len],
        })
    }
}

/// Set the message fee
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct SetMessageFee<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for SetMessageFee<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for SetMessageFee<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<SetMessageFee<'a>, &'static str> {
        SetMessageFee::parse(span)
    }
}

impl<'a> SetMessageFee<'a> {
    pub fn chain(&self) -> u16 {
        u16::from_be_bytes(self.span[..2].try_into().unwrap())
    }

    pub fn fee(&self) -> [u8; 32] {
        self.span[2..34].try_into().unwrap()
    }

    pub fn parse(span: &'a [u8]) -> Result<SetMessageFee<'a>, &'static str> {
        if span.len() != 34 {
            return Err("SetMessageFee span too short. Need exactly 34 bytes");
        }

        Ok(SetMessageFee { span: &span[..34] })
    }
}

/// Transfer fees to someone
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct TransferFees<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for TransferFees<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for TransferFees<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<TransferFees<'a>, &'static str> {
        TransferFees::parse(span)
    }
}

impl<'a> TransferFees<'a> {
    pub fn chain(&self) -> u16 {
        u16::from_be_bytes(self.span[..2].try_into().unwrap())
    }

    pub fn amount(&self) -> [u8; 32] {
        self.span[2..34].try_into().unwrap()
    }

    pub fn recipient(&self) -> [u8; 32] {
        self.span[34..66].try_into().unwrap()
    }

    pub fn parse(span: &'a [u8]) -> Result<TransferFees<'a>, &'static str> {
        if span.len() != 66 {
            return Err("TransferFees span too short. Need exactly 66 bytes");
        }

        Ok(TransferFees { span: &span[..66] })
    }
}

/// Recover a chain ID
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct RecoverChainId<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for RecoverChainId<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for RecoverChainId<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<RecoverChainId<'a>, &'static str> {
        RecoverChainId::parse(span)
    }
}

impl<'a> RecoverChainId<'a> {
    pub fn recovered_chain(&self) -> u16 {
        u16::from_be_bytes(self.span[..2].try_into().unwrap())
    }

    pub fn evm_chain_id(&self) -> [u8; 32] {
        self.span[2..34].try_into().unwrap()
    }

    pub fn new_chain(&self) -> u16 {
        u16::from_be_bytes(self.span[34..36].try_into().unwrap())
    }

    pub fn parse(span: &'a [u8]) -> Result<RecoverChainId<'a>, &'static str> {
        if span.len() != 36 {
            return Err("RecoverChainId span too short. Need exactly 36 bytes");
        }

        Ok(RecoverChainId { span: &span[..36] })
    }
}

#[cfg(test)]
mod test {
    use crate::{core::CoreBridgeGovPayload, Vaa};

    #[test]
    fn contract_upgrade() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x07, 0x7a, 0x56, 0x3a, 0xb1, 0xe7, 0x88,
            0x60, 0x94, 0x39, 0xfe, 0x52, 0x72, 0x29, 0x85, 0x26, 0x01, 0x66, 0x5a, 0xe0, 0x86,
            0xff, 0xa3, 0x58, 0xcd, 0x1f, 0x94, 0x95, 0xfd, 0x85, 0xdc, 0xfe, 0x52, 0xea, 0x11,
            0xa8, 0x7e, 0xf7, 0xfe, 0x6f, 0x00, 0x52, 0x64, 0x56, 0x1f, 0x07, 0x29, 0x1c, 0xcf,
            0x89, 0xb7, 0x33, 0x47, 0xb4, 0xab, 0x56, 0x8f, 0xef, 0x46, 0x8c, 0x44, 0x87, 0xd0,
            0x91, 0x00, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc1, 0x10, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x01, 0x00, 0x01, 0x5c, 0xde, 0xcd, 0x10, 0xd4, 0x0c, 0xee, 0x2b, 0x16, 0x01,
            0xe3, 0xad, 0xc3, 0xbb, 0xe9, 0x14, 0xe3, 0x62, 0x59, 0x25, 0xd0, 0xc9, 0xbd, 0x7f,
            0x7b, 0xa0, 0xc1, 0x53, 0x46, 0x59, 0x78, 0xe7,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .unwrap()
            .decree();

        let contract_upgrade = payload.contract_upgrade().unwrap();

        assert_eq!(contract_upgrade.chain(), 1);
        assert_eq!(
            contract_upgrade.implementation(),
            [
                0x5c, 0xde, 0xcd, 0x10, 0xd4, 0x0c, 0xee, 0x2b, 0x16, 0x01, 0xe3, 0xad, 0xc3, 0xbb,
                0xe9, 0x14, 0xe3, 0x62, 0x59, 0x25, 0xd0, 0xc9, 0xbd, 0x7f, 0x7b, 0xa0, 0xc1, 0x53,
                0x46, 0x59, 0x78, 0xe7,
            ]
        );
    }

    #[test]
    fn invalid_contract_upgrade() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x07, 0x7a, 0x56, 0x3a, 0xb1, 0xe7, 0x88,
            0x60, 0x94, 0x39, 0xfe, 0x52, 0x72, 0x29, 0x85, 0x26, 0x01, 0x66, 0x5a, 0xe0, 0x86,
            0xff, 0xa3, 0x58, 0xcd, 0x1f, 0x94, 0x95, 0xfd, 0x85, 0xdc, 0xfe, 0x52, 0xea, 0x11,
            0xa8, 0x7e, 0xf7, 0xfe, 0x6f, 0x00, 0x52, 0x64, 0x56, 0x1f, 0x07, 0x29, 0x1c, 0xcf,
            0x89, 0xb7, 0x33, 0x47, 0xb4, 0xab, 0x56, 0x8f, 0xef, 0x46, 0x8c, 0x44, 0x87, 0xd0,
            0x91, 0x00, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc1, 0x10, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x01, 0x00, 0x01, 0x5c, 0xde, 0xcd, 0x10, 0xd4, 0x0c, 0xee, 0x2b, 0x16, 0x01,
            0xe3, 0xad, 0xc3, 0xbb, 0xe9, 0x14, 0xe3, 0x62, 0x59, 0x25, 0xd0, 0xc9, 0xbd, 0x7f,
            0x7b, 0xa0, 0xc1, 0x53, 0x46, 0x59, 0x78, 0xe7, 0x69,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let err = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "ContractUpgrade span too short. Need exactly 34 bytes");
    }

    #[test]
    fn guardian_set_update() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xf2, 0xbf, 0x6e, 0x30, 0xb3, 0xf4, 0x57,
            0x77, 0xd2, 0x39, 0x38, 0xf4, 0xdb, 0xeb, 0x4e, 0x04, 0xc5, 0xc6, 0x0d, 0xe7, 0x72,
            0x0f, 0x1f, 0x97, 0x65, 0xaa, 0x4a, 0x1d, 0x1a, 0x9a, 0x9b, 0x0c, 0x32, 0xa0, 0xb8,
            0xc3, 0x59, 0xb1, 0x29, 0x16, 0xe6, 0x7c, 0xb5, 0x10, 0x19, 0x2c, 0x1f, 0xd8, 0xa0,
            0x9d, 0x21, 0xef, 0x20, 0x1a, 0xe4, 0xdb, 0x89, 0x61, 0xc0, 0x5f, 0xfe, 0xba, 0xc5,
            0x33, 0x01, 0x11, 0x94, 0xd7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x78, 0xf2, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xbe, 0xfa, 0x42, 0x9d, 0x57,
            0xcd, 0x18, 0xb7, 0xf8, 0xa4, 0xd9, 0x1a, 0x2d, 0xa9, 0xab, 0x4a, 0xf0, 0x5d, 0x0f,
            0xbe, 0x88, 0xd7, 0xd8, 0xb3, 0x2a, 0x91, 0x05, 0xd2, 0x28, 0x10, 0x0e, 0x72, 0xdf,
            0xfe, 0x2f, 0xae, 0x07, 0x05, 0xd3, 0x1c,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 0);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 294967295);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .unwrap()
            .decree();

        let guardian_set_update = payload.guardian_set_update().unwrap();

        assert_eq!(guardian_set_update.new_index(), 1);
        assert_eq!(guardian_set_update.num_guardians(), 2);

        let expected_guardians = [
            [
                0xbe, 0xfa, 0x42, 0x9d, 0x57, 0xcd, 0x18, 0xb7, 0xf8, 0xa4, 0xd9, 0x1a, 0x2d, 0xa9,
                0xab, 0x4a, 0xf0, 0x5d, 0x0f, 0xbe,
            ],
            [
                0x88, 0xd7, 0xd8, 0xb3, 0x2a, 0x91, 0x05, 0xd2, 0x28, 0x10, 0x0e, 0x72, 0xdf, 0xfe,
                0x2f, 0xae, 0x07, 0x05, 0xd3, 0x1c,
            ],
        ];
        for (i, expected) in expected_guardians.iter().enumerate() {
            let guardian = guardian_set_update.guardian_at(i);
            assert_eq!(guardian, *expected);
        }

        // Try to access out of bounds.
        let err = guardian_set_update.try_guardian_at(2).err().unwrap();
        assert_eq!(err, "Exceeds number of encoded guardians");
    }

    #[test]
    fn invalid_guardian_set_update() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xf2, 0xbf, 0x6e, 0x30, 0xb3, 0xf4, 0x57,
            0x77, 0xd2, 0x39, 0x38, 0xf4, 0xdb, 0xeb, 0x4e, 0x04, 0xc5, 0xc6, 0x0d, 0xe7, 0x72,
            0x0f, 0x1f, 0x97, 0x65, 0xaa, 0x4a, 0x1d, 0x1a, 0x9a, 0x9b, 0x0c, 0x32, 0xa0, 0xb8,
            0xc3, 0x59, 0xb1, 0x29, 0x16, 0xe6, 0x7c, 0xb5, 0x10, 0x19, 0x2c, 0x1f, 0xd8, 0xa0,
            0x9d, 0x21, 0xef, 0x20, 0x1a, 0xe4, 0xdb, 0x89, 0x61, 0xc0, 0x5f, 0xfe, 0xba, 0xc5,
            0x33, 0x01, 0x11, 0x94, 0xd7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x78, 0xf2, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xbe, 0xfa, 0x42, 0x9d, 0x57,
            0xcd, 0x18, 0xb7, 0xf8, 0xa4, 0xd9, 0x1a, 0x2d, 0xa9, 0xab, 0x4a, 0xf0, 0x5d, 0x0f,
            0xbe, 0x88, 0xd7, 0xd8, 0xb3, 0x2a, 0x91, 0x05, 0xd2, 0x28, 0x10, 0x0e, 0x72, 0xdf,
            0xfe, 0x2f, 0xae, 0x07, 0x05, 0xd3, 0x1c, 0x69,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 0);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 294967295);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let err = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(
            err,
            "GuardianSetUpdate span too short. Need exactly 7 + num_guardians * 20 bytes"
        );
    }

    #[test]
    fn set_message_fee() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x61, 0x06, 0x05, 0x89, 0x0d, 0x92,
            0x28, 0xbd, 0x32, 0x75, 0x59, 0x1d, 0xb8, 0x1a, 0xf1, 0xde, 0xef, 0x81, 0x52, 0x41,
            0xe5, 0xe8, 0x31, 0x1f, 0x32, 0x36, 0x1c, 0x3e, 0xa3, 0xaa, 0x93, 0x1d, 0x79, 0xef,
            0xbb, 0xe0, 0x0a, 0xca, 0xf2, 0x9f, 0x2f, 0x5a, 0x69, 0x78, 0x7c, 0x4e, 0xcd, 0x4a,
            0xf9, 0x8e, 0x4f, 0x93, 0x6b, 0xd5, 0x3f, 0xd3, 0x21, 0x43, 0xc4, 0xbd, 0x57, 0x75,
            0x3c, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x69, 0x52, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x39,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 0);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .unwrap()
            .decree();

        let set_message_fee = payload.set_message_fee().unwrap();

        assert_eq!(set_message_fee.chain(), 1);
        assert_eq!(
            set_message_fee.fee(),
            [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x1b, 0x39,
            ]
        );
    }

    #[test]
    fn invalid_set_message_fee() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x61, 0x06, 0x05, 0x89, 0x0d, 0x92,
            0x28, 0xbd, 0x32, 0x75, 0x59, 0x1d, 0xb8, 0x1a, 0xf1, 0xde, 0xef, 0x81, 0x52, 0x41,
            0xe5, 0xe8, 0x31, 0x1f, 0x32, 0x36, 0x1c, 0x3e, 0xa3, 0xaa, 0x93, 0x1d, 0x79, 0xef,
            0xbb, 0xe0, 0x0a, 0xca, 0xf2, 0x9f, 0x2f, 0x5a, 0x69, 0x78, 0x7c, 0x4e, 0xcd, 0x4a,
            0xf9, 0x8e, 0x4f, 0x93, 0x6b, 0xd5, 0x3f, 0xd3, 0x21, 0x43, 0xc4, 0xbd, 0x57, 0x75,
            0x3c, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x69, 0x52, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x39, 0x69,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 0);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let err = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "SetMessageFee span too short. Need exactly 34 bytes");
    }

    #[test]
    fn transfer_fees() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xfe, 0x09, 0xb9, 0x6e, 0xc6, 0xe5, 0x8b,
            0x1d, 0x8c, 0xa1, 0xbb, 0x57, 0x21, 0xa3, 0x0f, 0x67, 0x8b, 0x0c, 0x90, 0xdc, 0x64,
            0x62, 0xca, 0x8b, 0x6d, 0x82, 0xed, 0xbf, 0x1f, 0xd0, 0x5e, 0xaf, 0x11, 0xb1, 0xae,
            0x69, 0xad, 0x08, 0xb4, 0x2d, 0x2b, 0x6a, 0x93, 0x3b, 0x83, 0x8a, 0x6a, 0x81, 0xa5,
            0xe1, 0x93, 0x2d, 0x1d, 0xf1, 0xcb, 0x34, 0x09, 0x7a, 0x59, 0xe0, 0x27, 0x82, 0x15,
            0xe0, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x71, 0x22, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0xed, 0xac, 0xb2, 0xd5, 0x26, 0xe2, 0xab, 0x22,
            0xd8, 0xce, 0xc0, 0x62, 0xeb, 0x8e, 0x2b, 0x7b, 0x8d, 0x80, 0x98, 0x03, 0xcb, 0x4a,
            0xd1, 0x1e, 0x98, 0x66, 0x79, 0x27, 0xa1, 0x16, 0x0b, 0x9f, 0xe4, 0x08,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 0);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .unwrap()
            .decree();

        let transfer_fees = payload.transfer_fees().unwrap();

        assert_eq!(transfer_fees.chain(), 1);
        assert_eq!(
            transfer_fees.amount(),
            [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x81, 0xed, 0xac,
            ]
        );
        assert_eq!(
            transfer_fees.recipient(),
            [
                0xb2, 0xd5, 0x26, 0xe2, 0xab, 0x22, 0xd8, 0xce, 0xc0, 0x62, 0xeb, 0x8e, 0x2b, 0x7b,
                0x8d, 0x80, 0x98, 0x03, 0xcb, 0x4a, 0xd1, 0x1e, 0x98, 0x66, 0x79, 0x27, 0xa1, 0x16,
                0x0b, 0x9f, 0xe4, 0x08,
            ]
        );
    }

    #[test]
    fn invalid_transfer_fees() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xfe, 0x09, 0xb9, 0x6e, 0xc6, 0xe5, 0x8b,
            0x1d, 0x8c, 0xa1, 0xbb, 0x57, 0x21, 0xa3, 0x0f, 0x67, 0x8b, 0x0c, 0x90, 0xdc, 0x64,
            0x62, 0xca, 0x8b, 0x6d, 0x82, 0xed, 0xbf, 0x1f, 0xd0, 0x5e, 0xaf, 0x11, 0xb1, 0xae,
            0x69, 0xad, 0x08, 0xb4, 0x2d, 0x2b, 0x6a, 0x93, 0x3b, 0x83, 0x8a, 0x6a, 0x81, 0xa5,
            0xe1, 0x93, 0x2d, 0x1d, 0xf1, 0xcb, 0x34, 0x09, 0x7a, 0x59, 0xe0, 0x27, 0x82, 0x15,
            0xe0, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x71, 0x22, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0xed, 0xac, 0xb2, 0xd5, 0x26, 0xe2, 0xab, 0x22,
            0xd8, 0xce, 0xc0, 0x62, 0xeb, 0x8e, 0x2b, 0x7b, 0x8d, 0x80, 0x98, 0x03, 0xcb, 0x4a,
            0xd1, 0x1e, 0x98, 0x66, 0x79, 0x27, 0xa1, 0x16, 0x0b, 0x9f, 0xe4, 0x08, 0x69,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 0);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let err = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "TransferFees span too short. Need exactly 66 bytes");
    }

    #[test]
    fn invalid_core_bridge_gov() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x24, 0x24, 0xa1, 0x40, 0x44, 0xfa, 0x55,
            0x38, 0xa5, 0x57, 0x2c, 0x51, 0x9e, 0x3b, 0x96, 0x9a, 0x71, 0x6f, 0xdf, 0x09, 0xd9,
            0x12, 0x9d, 0xb2, 0x13, 0x9b, 0xa1, 0xc3, 0xdc, 0xa9, 0x76, 0x7a, 0x53, 0x47, 0x4f,
            0xb3, 0x79, 0x28, 0xe0, 0xa0, 0xd7, 0x1c, 0x07, 0x5d, 0x8e, 0x43, 0x0d, 0x60, 0x63,
            0x47, 0xa9, 0x5d, 0x42, 0x96, 0xba, 0xde, 0x3f, 0x6c, 0x52, 0xe6, 0x4c, 0x4b, 0xf7,
            0xd3, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xab, 0x90, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x64, 0x67,
            0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x3e, 0xe1, 0x8b, 0x22, 0x14, 0xaf, 0xf9, 0x70, 0x00, 0xd9,
            0x74, 0xcf, 0x64, 0x7e, 0x7c, 0x34, 0x7e, 0x8f, 0xa5, 0x85,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = raw_vaa.payload();
        let module = &payload.as_ref()[..32];
        assert_ne!(module, super::GOV_MODULE);

        let err = CoreBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "Invalid Core Bridge governance message");
    }
}
