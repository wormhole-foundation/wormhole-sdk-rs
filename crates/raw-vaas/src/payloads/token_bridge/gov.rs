use crate::Payload;

pub(crate) const GOV_MODULE: &[u8; 32] = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00TokenBridge";

/// Token Bridge Governance payload, including type
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct TokenBridgeGovPayload<'a> {
    pub(crate) span: &'a [u8],

    decree: TokenBridgeDecree<'a>,
}

impl AsRef<[u8]> for TokenBridgeGovPayload<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<Payload<'a>> for TokenBridgeGovPayload<'a> {
    type Error = &'static str;

    fn try_from(payload: Payload<'a>) -> Result<TokenBridgeGovPayload<'a>, &'static str> {
        TokenBridgeGovPayload::parse(payload.span)
    }
}

impl<'a> TokenBridgeGovPayload<'a> {
    pub fn span(&self) -> &[u8] {
        self.span
    }

    pub fn decree(&self) -> TokenBridgeDecree<'a> {
        self.decree
    }

    pub fn parse(span: &[u8]) -> Result<TokenBridgeGovPayload, &'static str> {
        if span.is_empty() {
            return Err("TokenBridgeGovPayload span too short. Need at least 1 byte");
        }

        if &span[..32] != GOV_MODULE {
            return Err("Invalid Token Bridge governance message");
        }

        let decree = TokenBridgeDecree::parse(&span[32..])?;

        Ok(TokenBridgeGovPayload { span, decree })
    }
}

/// The non-type-flag contents
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TokenBridgeDecree<'a> {
    RegisterChain(RegisterChain<'a>),
    ContractUpgrade(ContractUpgrade<'a>),
    RecoverChainId(RecoverChainId<'a>),
}

impl AsRef<[u8]> for TokenBridgeDecree<'_> {
    fn as_ref(&self) -> &[u8] {
        match self {
            TokenBridgeDecree::RegisterChain(inner) => inner.as_ref(),
            TokenBridgeDecree::ContractUpgrade(inner) => inner.as_ref(),
            TokenBridgeDecree::RecoverChainId(inner) => inner.as_ref(),
        }
    }
}

impl<'a> TryFrom<&'a [u8]> for TokenBridgeDecree<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<TokenBridgeDecree<'a>, &'static str> {
        TokenBridgeDecree::parse(span)
    }
}

impl<'a> TokenBridgeDecree<'a> {
    pub fn span(&self) -> &[u8] {
        self.as_ref()
    }

    pub fn register_chain(&self) -> Option<&RegisterChain> {
        match self {
            TokenBridgeDecree::RegisterChain(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn contract_upgrade(&self) -> Option<&ContractUpgrade> {
        match self {
            TokenBridgeDecree::ContractUpgrade(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn recover_chain_id(&self) -> Option<&RecoverChainId> {
        match self {
            TokenBridgeDecree::RecoverChainId(inner) => Some(inner),
            _ => None,
        }
    }

    pub fn parse(span: &'a [u8]) -> Result<Self, &'static str> {
        if span.is_empty() {
            return Err("TokenBridgeDecree span too short. Need at least 1 byte");
        }

        let decree = match span[0] {
            1 => TokenBridgeDecree::RegisterChain(TryFrom::try_from(&span[1..])?),
            2 => TokenBridgeDecree::ContractUpgrade(TryFrom::try_from(&span[1..])?),
            3 => TokenBridgeDecree::RecoverChainId(TryFrom::try_from(&span[1..])?),
            _ => {
                return Err("Invalid Token Bridge decree");
            }
        };

        Ok(decree)
    }
}

/// Register a new chain
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct RegisterChain<'a> {
    pub(crate) span: &'a [u8],
}

impl AsRef<[u8]> for RegisterChain<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for RegisterChain<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<RegisterChain<'a>, &'static str> {
        RegisterChain::parse(span)
    }
}

impl<'a> RegisterChain<'a> {
    pub fn foreign_chain(&self) -> u16 {
        u16::from_be_bytes(self.span[2..4].try_into().unwrap())
    }

    pub fn foreign_emitter(&self) -> [u8; 32] {
        self.span[4..36].try_into().unwrap()
    }

    pub fn parse(span: &'a [u8]) -> Result<RegisterChain<'a>, &'static str> {
        if span.len() != 36 {
            return Err("RegisterChain span too short. Need exactly 36 bytes");
        }

        Ok(RegisterChain { span: &span[..36] })
    }
}

/// Upgrade a contract
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ContractUpgrade<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for ContractUpgrade<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for ContractUpgrade<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<ContractUpgrade<'a>, &'static str> {
        ContractUpgrade::parse(span)
    }
}

impl<'a> ContractUpgrade<'a> {
    pub fn chain(&self) -> u16 {
        u16::from_be_bytes(self.span[..2].try_into().unwrap())
    }

    pub fn implementation(&self) -> [u8; 32] {
        self.span[2..34].try_into().unwrap()
    }

    pub fn parse(span: &'a [u8]) -> Result<ContractUpgrade<'a>, &'static str> {
        if span.len() != 34 {
            return Err("ContractUpgrade span too short. Need exactly 34 bytes");
        }

        Ok(ContractUpgrade { span: &span[..34] })
    }
}

/// Recover a chain ID
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct RecoverChainId<'a> {
    span: &'a [u8],
}

impl AsRef<[u8]> for RecoverChainId<'_> {
    fn as_ref(&self) -> &[u8] {
        self.span
    }
}

impl<'a> TryFrom<&'a [u8]> for RecoverChainId<'a> {
    type Error = &'static str;

    fn try_from(span: &'a [u8]) -> Result<RecoverChainId<'a>, &'static str> {
        RecoverChainId::parse(span)
    }
}

impl<'a> RecoverChainId<'a> {
    pub fn recovered_chain(&self) -> u16 {
        u16::from_be_bytes(self.span[..2].try_into().unwrap())
    }

    pub fn evm_chain_id(&self) -> [u8; 32] {
        self.span[2..34].try_into().unwrap()
    }

    pub fn new_chain(&self) -> u16 {
        u16::from_be_bytes(self.span[34..36].try_into().unwrap())
    }

    pub fn parse(span: &'a [u8]) -> Result<RecoverChainId<'a>, &'static str> {
        if span.len() != 36 {
            return Err("RecoverChainId span too short. Need exactly 36 bytes");
        }

        Ok(RecoverChainId { span: &span[..36] })
    }
}

#[cfg(test)]
mod test {
    use crate::{token_bridge::TokenBridgeGovPayload, Vaa};

    #[test]
    fn register_chain() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x24, 0x24, 0xa1, 0x40, 0x44, 0xfa, 0x55,
            0x38, 0xa5, 0x57, 0x2c, 0x51, 0x9e, 0x3b, 0x96, 0x9a, 0x71, 0x6f, 0xdf, 0x09, 0xd9,
            0x12, 0x9d, 0xb2, 0x13, 0x9b, 0xa1, 0xc3, 0xdc, 0xa9, 0x76, 0x7a, 0x53, 0x47, 0x4f,
            0xb3, 0x79, 0x28, 0xe0, 0xa0, 0xd7, 0x1c, 0x07, 0x5d, 0x8e, 0x43, 0x0d, 0x60, 0x63,
            0x47, 0xa9, 0x5d, 0x42, 0x96, 0xba, 0xde, 0x3f, 0x6c, 0x52, 0xe6, 0x4c, 0x4b, 0xf7,
            0xd3, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xab, 0x90, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x64, 0x67,
            0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x3e, 0xe1, 0x8b, 0x22, 0x14, 0xaf, 0xf9, 0x70, 0x00, 0xd9,
            0x74, 0xcf, 0x64, 0x7e, 0x7c, 0x34, 0x7e, 0x8f, 0xa5, 0x85,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = TokenBridgeGovPayload::try_from(raw_vaa.payload())
            .unwrap()
            .decree();

        let register_chain = payload.register_chain().unwrap();

        assert_eq!(register_chain.foreign_chain(), 2);
        assert_eq!(
            register_chain.foreign_emitter(),
            [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xe1,
                0x8b, 0x22, 0x14, 0xaf, 0xf9, 0x70, 0x00, 0xd9, 0x74, 0xcf, 0x64, 0x7e, 0x7c, 0x34,
                0x7e, 0x8f, 0xa5, 0x85,
            ],
        );
    }

    #[test]
    fn invalid_register_chain() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x24, 0x24, 0xa1, 0x40, 0x44, 0xfa, 0x55,
            0x38, 0xa5, 0x57, 0x2c, 0x51, 0x9e, 0x3b, 0x96, 0x9a, 0x71, 0x6f, 0xdf, 0x09, 0xd9,
            0x12, 0x9d, 0xb2, 0x13, 0x9b, 0xa1, 0xc3, 0xdc, 0xa9, 0x76, 0x7a, 0x53, 0x47, 0x4f,
            0xb3, 0x79, 0x28, 0xe0, 0xa0, 0xd7, 0x1c, 0x07, 0x5d, 0x8e, 0x43, 0x0d, 0x60, 0x63,
            0x47, 0xa9, 0x5d, 0x42, 0x96, 0xba, 0xde, 0x3f, 0x6c, 0x52, 0xe6, 0x4c, 0x4b, 0xf7,
            0xd3, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xab, 0x90, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x64, 0x67,
            0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x3e, 0xe1, 0x8b, 0x22, 0x14, 0xaf, 0xf9, 0x70, 0x00, 0xd9,
            0x74, 0xcf, 0x64, 0x7e, 0x7c, 0x34, 0x7e, 0x8f, 0xa5, 0x85, 0x69,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let err = TokenBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "RegisterChain span too short. Need exactly 36 bytes");
    }

    #[test]
    fn contract_upgrade() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0xb5, 0x7c, 0x40, 0x1c, 0x98, 0x5d, 0x2e,
            0x43, 0x01, 0x68, 0x5d, 0x42, 0xa8, 0x6d, 0x13, 0x72, 0x11, 0x7a, 0x27, 0xde, 0x8b,
            0x0c, 0x12, 0x53, 0x2d, 0x86, 0x9a, 0x7d, 0x87, 0x95, 0x99, 0xc6, 0x75, 0xf1, 0x1d,
            0xae, 0x5c, 0x6b, 0x47, 0xe4, 0x29, 0xc9, 0x80, 0x25, 0x16, 0xfb, 0xf8, 0x8f, 0x51,
            0xbc, 0xb8, 0x57, 0xc1, 0xa2, 0x33, 0xae, 0x24, 0x76, 0x3f, 0x6a, 0x03, 0xdf, 0x80,
            0x41, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x50, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x64, 0x67,
            0x65, 0x02, 0x00, 0x01, 0x48, 0x5e, 0xdc, 0xc9, 0x4d, 0xd2, 0x1d, 0xec, 0xbb, 0xac,
            0x52, 0x61, 0x0a, 0x00, 0x8c, 0x1b, 0xc5, 0xc8, 0xe4, 0x85, 0x9c, 0x45, 0x04, 0xff,
            0xf7, 0x43, 0x3a, 0xd8, 0x76, 0xcb, 0x12, 0x63,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = TokenBridgeGovPayload::try_from(raw_vaa.payload())
            .unwrap()
            .decree();

        let contract_upgrade = payload.contract_upgrade().unwrap();

        assert_eq!(contract_upgrade.chain(), 1);
        assert_eq!(
            contract_upgrade.implementation(),
            [
                0x48, 0x5e, 0xdc, 0xc9, 0x4d, 0xd2, 0x1d, 0xec, 0xbb, 0xac, 0x52, 0x61, 0x0a, 0x00,
                0x8c, 0x1b, 0xc5, 0xc8, 0xe4, 0x85, 0x9c, 0x45, 0x04, 0xff, 0xf7, 0x43, 0x3a, 0xd8,
                0x76, 0xcb, 0x12, 0x63,
            ]
        );
    }

    #[test]
    fn invalid_contract_upgrade() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0xb5, 0x7c, 0x40, 0x1c, 0x98, 0x5d, 0x2e,
            0x43, 0x01, 0x68, 0x5d, 0x42, 0xa8, 0x6d, 0x13, 0x72, 0x11, 0x7a, 0x27, 0xde, 0x8b,
            0x0c, 0x12, 0x53, 0x2d, 0x86, 0x9a, 0x7d, 0x87, 0x95, 0x99, 0xc6, 0x75, 0xf1, 0x1d,
            0xae, 0x5c, 0x6b, 0x47, 0xe4, 0x29, 0xc9, 0x80, 0x25, 0x16, 0xfb, 0xf8, 0x8f, 0x51,
            0xbc, 0xb8, 0x57, 0xc1, 0xa2, 0x33, 0xae, 0x24, 0x76, 0x3f, 0x6a, 0x03, 0xdf, 0x80,
            0x41, 0x01, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x50, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x64, 0x67,
            0x65, 0x02, 0x00, 0x01, 0x48, 0x5e, 0xdc, 0xc9, 0x4d, 0xd2, 0x1d, 0xec, 0xbb, 0xac,
            0x52, 0x61, 0x0a, 0x00, 0x8c, 0x1b, 0xc5, 0xc8, 0xe4, 0x85, 0x9c, 0x45, 0x04, 0xff,
            0xf7, 0x43, 0x3a, 0xd8, 0x76, 0xcb, 0x12, 0x63, 0x69,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let err = TokenBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "ContractUpgrade span too short. Need exactly 34 bytes");
    }

    #[test]
    fn invalid_token_bridge_gov() {
        let vaa = [
            0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x05, 0xe1, 0xbb, 0x59, 0x01, 0xb0, 0xa7,
            0x89, 0x51, 0xec, 0xec, 0x43, 0x09, 0x94, 0x38, 0x3f, 0x9a, 0xd0, 0xe0, 0xf7, 0x67,
            0xc2, 0x1a, 0x67, 0xa8, 0x26, 0x07, 0x8b, 0xf1, 0x1e, 0xce, 0x0c, 0x39, 0x38, 0x1f,
            0xa8, 0x1b, 0xfa, 0x20, 0xa6, 0xed, 0x2e, 0xa2, 0x36, 0x2a, 0x6c, 0x0d, 0x94, 0x59,
            0x77, 0x8f, 0x5e, 0x8b, 0xf8, 0xe9, 0x49, 0xa5, 0x8e, 0x23, 0xb5, 0x97, 0x18, 0xf5,
            0x69, 0x00, 0x00, 0xbc, 0x61, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc1, 0x11, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72,
            0x65, 0x01, 0x00, 0x01, 0xdd, 0x33, 0xdb, 0x6e, 0x62, 0x4f, 0x83, 0x54, 0xd2, 0x16,
            0x8a, 0x9b, 0x3e, 0x04, 0xa6, 0xe0, 0x46, 0x02, 0xd2, 0xf6, 0x58, 0xed, 0xaa, 0x11,
            0x40, 0x3d, 0xc1, 0xb6, 0x1b, 0x46, 0xef, 0xc5,
        ];

        let raw_vaa = Vaa::parse(vaa.as_slice()).unwrap();
        assert_eq!(raw_vaa.version(), 1);
        assert_eq!(raw_vaa.guardian_set_index(), 2);
        assert_eq!(raw_vaa.signature_count(), 1);

        let body = raw_vaa.body();
        assert_eq!(body.timestamp(), 12345678);
        assert_eq!(body.nonce(), 0);
        assert_eq!(body.emitter_chain(), 1);

        let payload = raw_vaa.payload();
        let module = &payload.as_ref()[..32];
        assert_ne!(module, super::GOV_MODULE);

        let err = TokenBridgeGovPayload::try_from(raw_vaa.payload())
            .err()
            .unwrap();
        assert_eq!(err, "Invalid Token Bridge governance message");
    }
}
